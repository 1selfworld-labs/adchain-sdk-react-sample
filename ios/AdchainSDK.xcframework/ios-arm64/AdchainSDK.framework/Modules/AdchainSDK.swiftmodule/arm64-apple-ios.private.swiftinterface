// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AdchainSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AdSupport
import AppTrackingTransparency
import Foundation
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
public enum AdchainAdError : Swift.Error {
  case notInitialized
  case loadFailed
  case networkError
  case noFill
  case unknown
  public var localizedDescription: Swift.String {
    get
  }
  public static func == (a: AdchainSDK.AdchainAdError, b: AdchainSDK.AdchainAdError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AdchainBanner {
  public static let shared: AdchainSDK.AdchainBanner
  final public func getBanner(placementId: Swift.String, onSuccess: @escaping (AdchainSDK.BannerInfoResponse) -> Swift.Void, onFailure: @escaping (AdchainSDK.AdchainAdError) -> Swift.Void)
  @objc deinit
}
@objc public enum LogLevel : Swift.Int, Swift.Comparable {
  case none = 0
  case error = 1
  case warning = 2
  case info = 3
  case debug = 4
  case verbose = 5
  public static func < (lhs: AdchainSDK.LogLevel, rhs: AdchainSDK.LogLevel) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class AdchainLogger : ObjectiveC.NSObject {
  public static var logLevel: AdchainSDK.LogLevel
  public static func e(_ tag: Swift.String, _ message: Swift.String, _ error: (any Swift.Error)? = nil)
  public static func w(_ tag: Swift.String, _ message: Swift.String, _ error: (any Swift.Error)? = nil)
  public static func i(_ tag: Swift.String, _ message: Swift.String)
  public static func d(_ tag: Swift.String, _ message: Swift.String)
  public static func v(_ tag: Swift.String, _ message: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public class AdchainMission {
  public var missionResponse: AdchainSDK.MissionResponse?
  public var eventsListener: (any AdchainSDK.AdchainMissionEventsListener)?
  public init?()
  @objc deinit
  public func load(onSuccess: @escaping ([AdchainSDK.Mission], AdchainSDK.MissionProgress) -> Swift.Void, onFailure: @escaping (AdchainSDK.AdchainAdError) -> Swift.Void, shouldStoreCallbacks: Swift.Bool = true)
  public func setEventsListener(_ listener: any AdchainSDK.AdchainMissionEventsListener)
  public func getMissions() -> [AdchainSDK.Mission]
  public func getMission(missionId: Swift.String) -> AdchainSDK.Mission?
  public func markAsParticipating(_ missionId: Swift.String)
  public func isParticipating(_ missionId: Swift.String) -> Swift.Bool
  public func clickMission(_ missionId: Swift.String, from viewController: UIKit.UIViewController)
  public func clickMission(_ mission: AdchainSDK.Mission, from viewController: UIKit.UIViewController)
  public func onMissionClicked(_ mission: AdchainSDK.Mission)
  public func onMissionImpressed(_ mission: AdchainSDK.Mission)
  public func onMissionCompleted(_ mission: AdchainSDK.Mission)
  public func onMissionProgressed(_ mission: AdchainSDK.Mission)
  public func onRewardButtonClicked(from viewController: UIKit.UIViewController)
  public static func refreshMissionList(unitId: Swift.String?)
  public func destroy()
}
public protocol AdchainMissionEventsListener : AnyObject {
  func onImpressed(_ mission: AdchainSDK.Mission)
  func onClicked(_ mission: AdchainSDK.Mission)
  func onCompleted(_ mission: AdchainSDK.Mission)
  func onProgressed(_ mission: AdchainSDK.Mission)
  func onRefreshed(unitId: Swift.String?)
}
public class AdchainQuiz {
  public init?()
  public func setQuizEventsListener(_ listener: any AdchainSDK.AdchainQuizEventsListener)
  public func load(onSuccess: @escaping (AdchainSDK.QuizResponse) -> Swift.Void, onFailure: @escaping (AdchainSDK.AdchainAdError) -> Swift.Void, shouldStoreCallbacks: Swift.Bool = true)
  public func clickQuiz(_ quizId: Swift.String, from viewController: UIKit.UIViewController)
  public func clickQuiz(_ quizEvent: AdchainSDK.QuizEvent, from viewController: UIKit.UIViewController)
  public func trackClick(_ quizEvent: AdchainSDK.QuizEvent)
  @objc deinit
}
public protocol AdchainQuizEventsListener : AnyObject {
  func onImpressed(_ quizEvent: AdchainSDK.QuizEvent)
  func onClicked(_ quizEvent: AdchainSDK.QuizEvent)
  func onQuizCompleted(_ quizEvent: AdchainSDK.QuizEvent, rewardAmount: Swift.Int)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class AdchainSdk : ObjectiveC.NSObject {
  @objc public static let shared: AdchainSDK.AdchainSdk
  @objc final public func initialize(application: UIKit.UIApplication, sdkConfig: AdchainSDK.AdchainSdkConfig)
  @objc final public func login(adchainSdkUser: AdchainSDK.AdchainSdkUser, listener: (any AdchainSDK.AdchainSdkLoginListener)? = nil)
  @objc final public func logout()
  final public func openOfferwall(presentingViewController: UIKit.UIViewController, placementId: Swift.String, callback: (any AdchainSDK.OfferwallCallback)? = nil)
  final public func openOfferwallWithUrl(_ url: Swift.String, placementId: Swift.String, presentingViewController: UIKit.UIViewController, callback: (any AdchainSDK.OfferwallCallback)? = nil)
  @discardableResult
  @objc final public func openExternalBrowser(_ url: Swift.String, placementId: Swift.String) -> Swift.Bool
  @objc final public func isInitialized() -> Swift.Bool
  @objc final public var isLoggedIn: Swift.Bool {
    @objc get
  }
  @objc final public func getCurrentUser() -> AdchainSDK.AdchainSdkUser?
  @objc public static func setLogLevel(_ level: AdchainSDK.LogLevel)
  @objc final public func getConfig() -> AdchainSDK.AdchainSdkConfig?
  @objc final public func getSDKVersion() -> Swift.String
  final public func getBannerInfo(placementId: Swift.String, completion: @escaping (Swift.Result<AdchainSDK.BannerInfoResponse, any Swift.Error>) -> Swift.Void)
  @objc final public func objc_openOfferwall(presentingViewController: UIKit.UIViewController, placementId: Swift.String)
  @objc final public func objc_openOfferwallWithUrl(_ url: Swift.String, placementId: Swift.String, presentingViewController: UIKit.UIViewController)
  @objc final public func getAdvertisingId(completion: @escaping (Swift.String) -> Swift.Void)
  final public func trackEvent(eventType: AdchainSDK.EventType, category: Swift.String, payload: [Swift.String : Any]? = nil)
  @objc final public func trackCustomEvent(eventName: Swift.String, category: Swift.String = "custom", payload: [Swift.String : Any]? = nil)
  final public func trackEventWithCustomName(eventName: Swift.String, category: Swift.String = "custom", payload: [Swift.String : Any]? = nil)
  @objc final public func flushEvents()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AdchainSdkConfig : ObjectiveC.NSObject {
  @objc public enum Environment : Swift.Int {
    case production = 0
    case staging = 1
    case development = 2
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let appKey: Swift.String
  @objc final public let appSecret: Swift.String
  @objc final public let environment: AdchainSDK.AdchainSdkConfig.Environment
  @objc final public let timeout: Foundation.TimeInterval
  @objc public class Builder : ObjectiveC.NSObject {
    @objc public init(appKey: Swift.String, appSecret: Swift.String)
    @objc public func setEnvironment(_ environment: AdchainSDK.AdchainSdkConfig.Environment) -> AdchainSDK.AdchainSdkConfig.Builder
    @objc public func setTimeout(_ timeout: Foundation.TimeInterval) -> AdchainSDK.AdchainSdkConfig.Builder
    @objc public func build() -> AdchainSDK.AdchainSdkConfig
    @objc deinit
  }
  @objc deinit
}
@objc public protocol AdchainSdkLoginListener {
  @objc func onSuccess()
  @objc func onFailure(_ error: AdchainSDK.AdchainLoginError)
}
@objc public enum AdchainLoginError : Swift.Int {
  case notInitialized = 0
  case invalidUserId = 1
  case networkError = 2
  case unknown = 3
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class AdchainSdkUser : ObjectiveC.NSObject {
  @objc public enum Gender : Swift.Int {
    case male = 0
    case female = 1
    case other = 2
    public var stringValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let userId: Swift.String
  final public let gender: AdchainSDK.AdchainSdkUser.Gender?
  final public let birthYear: Swift.Int?
  public init(userId: Swift.String, gender: AdchainSDK.AdchainSdkUser.Gender? = nil, birthYear: Swift.Int? = nil)
  @objc convenience public init(userId: Swift.String)
  @objc convenience public init(userId: Swift.String, genderValue: Swift.Int, birthYear: Swift.Int)
  @objc deinit
}
public struct BannerInfoResponse : Swift.Codable {
  public let success: Swift.Bool
  public let imageUrl: Swift.String?
  public let imageWidth: Swift.Int?
  public let imageHeight: Swift.Int?
  public let titleText: Swift.String?
  public let linkType: Swift.String?
  public let internalLinkUrl: Swift.String?
  public let externalLinkUrl: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DeviceUtils {
  public static func getAdvertisingId() async -> Swift.String
}
public enum EventType : Swift.String, Swift.Codable {
  case quizClicked
  case quizImpressed
  case quizStarted
  case quizCompleted
  case missionClicked
  case missionImpressed
  case missionCompleted
  case missionProgressed
  case offerwallOpened
  case offerwallClosed
  case bannerClicked
  case bannerImpressed
  case loginSuccess
  case loginFailed
  case custom
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Event : Swift.Codable {
  public init(eventId: Swift.String = UUID().uuidString, type: AdchainSDK.EventType, timestamp: Foundation.TimeInterval = Date().timeIntervalSince1970 * 1000, category: Swift.String, payload: [Swift.String : Any]? = nil)
  public init(eventId: Swift.String = UUID().uuidString, customEventName: Swift.String, timestamp: Foundation.TimeInterval = Date().timeIntervalSince1970 * 1000, category: Swift.String, payload: [Swift.String : Any]? = nil)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EventBatch : Swift.Encodable {
  public let batchId: Swift.String
  public let batchTimestamp: Swift.String
  public let sdkVersion: Swift.String
  public let platform: Swift.String
  public let events: [AdchainSDK.TrackEventRequest]
  public init(batchId: Swift.String = UUID().uuidString, batchTimestamp: Swift.String = ISO8601DateFormatter().string(from: Date()), sdkVersion: Swift.String, platform: Swift.String = "iOS", events: [AdchainSDK.TrackEventRequest])
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EventBatchResponse : Swift.Codable {
  public let success: Swift.Bool
  public let processedCount: Swift.Int
  public let failedEventIds: [Swift.String]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MissionType : Swift.String, Swift.Codable, Swift.Sendable {
  case normal
  case offerwallPromotion
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Mission : Swift.Codable, Swift.Sendable {
  public let id: Swift.String
  public let title: Swift.String
  public let description: Swift.String
  public let imageUrl: Swift.String
  public let landingUrl: Swift.String
  public let point: Swift.String
  public let status: Swift.String?
  public let progress: Swift.Int?
  public let total: Swift.Int?
  public let type: AdchainSDK.MissionType?
  public let impressionOrder: Swift.Int?
  public let placementId: Swift.String?
  public init(id: Swift.String, title: Swift.String, description: Swift.String, imageUrl: Swift.String, landingUrl: Swift.String, point: Swift.String, status: Swift.String? = nil, progress: Swift.Int? = nil, total: Swift.Int? = nil, type: AdchainSDK.MissionType? = nil, impressionOrder: Swift.Int? = nil, placementId: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MissionProgress : Swift.Sendable {
  public let current: Swift.Int
  public let total: Swift.Int
  public var percentage: Swift.Float {
    get
  }
  public var isCompleted: Swift.Bool {
    get
  }
  public init(current: Swift.Int, total: Swift.Int)
}
public struct MissionResponse : Swift.Codable {
  public let success: Swift.Bool?
  public let events: [AdchainSDK.Mission]
  public let current: Swift.Int
  public let total: Swift.Int
  public let rewardUrl: Swift.String?
  public let message: Swift.String?
  public let titleText: Swift.String?
  public let descriptionText: Swift.String?
  public let bottomText: Swift.String?
  public let rewardIconUrl: Swift.String?
  public let bottomIconUrl: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol OfferwallCallback {
  func onOpened()
  func onClosed()
  func onError(_ message: Swift.String)
  func onRewardEarned(_ amount: Swift.Int)
}
public struct QuizEvent : Swift.Codable, Swift.Sendable {
  public let id: Swift.String
  public let title: Swift.String
  public let description: Swift.String?
  public let imageUrl: Swift.String
  public let landingUrl: Swift.String
  public let point: Swift.String
  public let status: Swift.String?
  public let completed: Swift.Bool?
  public let impressionOrder: Swift.Int?
  public let placementId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct QuizResponse : Swift.Codable {
  public let success: Swift.Bool?
  public let titleText: Swift.String?
  public let completedImageUrl: Swift.String?
  public let completedImageWidth: Swift.Int?
  public let completedImageHeight: Swift.Int?
  public let events: [AdchainSDK.QuizEvent]
  public let message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrackEventRequest : Swift.Encodable {
  public let name: Swift.String
  public let sdkVersion: Swift.String
  public let timestamp: Swift.String
  public let sessionId: Swift.String
  public let userId: Swift.String?
  public let deviceId: Swift.String
  public let ifa: Swift.String
  public let platform: Swift.String
  public let osVersion: Swift.String
  public let parameters: [Swift.String : Swift.String]
  public init(name: Swift.String, sdkVersion: Swift.String, timestamp: Swift.String, sessionId: Swift.String, userId: Swift.String?, deviceId: Swift.String, ifa: Swift.String, platform: Swift.String, osVersion: Swift.String, parameters: [Swift.String : Swift.String])
  public func encode(to encoder: any Swift.Encoder) throws
}
extension AdchainSDK.AdchainAdError : Swift.Equatable {}
extension AdchainSDK.AdchainAdError : Swift.Hashable {}
extension AdchainSDK.LogLevel : Swift.Hashable {}
extension AdchainSDK.LogLevel : Swift.RawRepresentable {}
extension AdchainSDK.AdchainSdkConfig.Environment : Swift.Equatable {}
extension AdchainSDK.AdchainSdkConfig.Environment : Swift.Hashable {}
extension AdchainSDK.AdchainSdkConfig.Environment : Swift.RawRepresentable {}
extension AdchainSDK.AdchainLoginError : Swift.Equatable {}
extension AdchainSDK.AdchainLoginError : Swift.Hashable {}
extension AdchainSDK.AdchainLoginError : Swift.RawRepresentable {}
extension AdchainSDK.AdchainSdkUser.Gender : Swift.Equatable {}
extension AdchainSDK.AdchainSdkUser.Gender : Swift.Hashable {}
extension AdchainSDK.AdchainSdkUser.Gender : Swift.RawRepresentable {}
extension AdchainSDK.EventType : Swift.Equatable {}
extension AdchainSDK.EventType : Swift.Hashable {}
extension AdchainSDK.EventType : Swift.RawRepresentable {}
extension AdchainSDK.MissionType : Swift.Equatable {}
extension AdchainSDK.MissionType : Swift.Hashable {}
extension AdchainSDK.MissionType : Swift.RawRepresentable {}
